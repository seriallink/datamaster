// Code generated by MockGen. DO NOT EDIT.

// Package mock_mocks is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	glue "github.com/aws/aws-sdk-go-v2/service/glue"
	gomock "go.uber.org/mock/gomock"
)

// MockGlueClient is a mock of GlueClient interface.
type MockGlueClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlueClientMockRecorder
	isgomock struct{}
}

// MockGlueClientMockRecorder is the mock recorder for MockGlueClient.
type MockGlueClientMockRecorder struct {
	mock *MockGlueClient
}

// NewMockGlueClient creates a new mock instance.
func NewMockGlueClient(ctrl *gomock.Controller) *MockGlueClient {
	mock := &MockGlueClient{ctrl: ctrl}
	mock.recorder = &MockGlueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlueClient) EXPECT() *MockGlueClientMockRecorder {
	return m.recorder
}

// CreateTable mock base method.
func (m *MockGlueClient) CreateTable(ctx context.Context, input *glue.CreateTableInput, optFns ...func(*glue.Options)) (*glue.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(*glue.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockGlueClientMockRecorder) CreateTable(ctx, input any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockGlueClient)(nil).CreateTable), varargs...)
}

// GetTable mock base method.
func (m *MockGlueClient) GetTable(ctx context.Context, input *glue.GetTableInput, optFns ...func(*glue.Options)) (*glue.GetTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTable", varargs...)
	ret0, _ := ret[0].(*glue.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockGlueClientMockRecorder) GetTable(ctx, input any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockGlueClient)(nil).GetTable), varargs...)
}

// UpdateTable mock base method.
func (m *MockGlueClient) UpdateTable(ctx context.Context, input *glue.UpdateTableInput, optFns ...func(*glue.Options)) (*glue.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTable", varargs...)
	ret0, _ := ret[0].(*glue.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockGlueClientMockRecorder) UpdateTable(ctx, input any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockGlueClient)(nil).UpdateTable), varargs...)
}
